(include "stdlib.llpl")
(include "OOP.llpl")

(class Rational ()
    (fields (Rational_numerator int) (Rational_denominator int))
    
    (method set(this a b)
        ((this "->" Rational_numerator) "=" (L a))
        ((this "->" Rational_denominator) "=" (L b))
    )
    
    (method print(this)
        (call numberOut (L (this "->" Rational_numerator)))
        (call out '/')
        (call numberOut (L (this "->" Rational_denominator)))
    )
    (method mul(this other) (comment "multiply to base")
        ((this "->" Rational_numerator) "*=" (L (other "->" Rational_numerator)))
        ((this "->" Rational_denominator) "*=" (L (other "->" Rational_denominator)))
        (mcall (L this) Rational_simplify)
    )
    (method add(this other)
        ((this "->" Rational_numerator) "=" (
          ((L (other "->" Rational_denominator)) "*" (L (this "->" Rational_numerator)))
          "+"
          ((L (other "->" Rational_numerator)) "*" (L (this "->" Rational_denominator)))
        ))
        ((this "->" Rational_denominator) "*=" (L (other "->" Rational_denominator)))
        
        (mcall (L this) Rational_simplify)
    )
    (method simplify(this)
        (var (nod int))
        (nod "=" (call GCD (L (this "->" Rational_numerator)) (L (this "->" Rational_denominator))))
        
        ((this "->" Rational_numerator) "/=" (L nod))
        ((this "->" Rational_denominator) "/=" (L nod))
    )
)
(class Float()
    (fields (Float_significand int) (Float_base int))
    
    (method set(this a b)
        ((this "->" Float_significand) "=" (L a))
        ((this "->" Float_base)        "=" (L b))
    )
    (method fromInt(this number)
        (var (base int))
        (base "=" 0)
        (comment "Если исходное число было кратно 10, то упрощаем")
        (while (((L number) "%" 10) "==" 0)
            (number "/=" 10)
            (base "++")
        )
        
        ((this "->" Float_significand) "=" (L number))
        ((this "->" Float_base) "=" (L base))
    )
    (method simplify(this)
        (while (((L (this "->" Float_significand)) "%" 10) "==" 0)
            ((this "->" Float_significand) "/=" 10)
            ((this "->" Float_base) "++")
        )
    )
    (comment (method print(this)
        (var (a int) (b int))
        (a "=" (L (this "->" Float_significand)))
        (b "=" (L (this "->" Float_base)))  
    ))
    (method printExp(this)
        (call numberOut (L (this "->" Float_significand)))
        (call out 'E')
        (call numberOut (L (this "->" Float_base)))
    )
    (method mul(this other)
        ((this "->" Float_significand) "*=" (L (other "->" Float_significand)))
        ((this "->" Float_base) "+=" (L (other "->" Float_base)))
    )
    (method div(this other)
        (while ((L (this "->" Float_significand)) "<" (20 "*" (L (other "->" Float_significand))))
            ((this "->" Float_significand) "*=" 10)
            ((this "->" Float_base) "--")
        )
    
        ((this "->" Float_significand) "/=" (L (other "->" Float_significand)))
        ((this "->" Float_base) "-=" (L (other "->" Float_base)))
    )
    (method add(this other)
        (if ((L (other "->" Float_significand)) "==" 0) 
            (return 0)
        )
        (block (var (a int)(b int)(delta int))
            (a "=" (L (other "->" Float_significand)))
            (b "=" (L (other "->" Float_base)))
            (delta "=" ((L (this "->" Float_base)) "-" (L b)))

            (while ((call abs (L delta)) ">" 1)
                (if ((L delta) ">" 0)
                    ((this "->" Float_significand) "*=" 10)
                    ((this "->" Float_base) "--")
                    (a "/=" 10)
                    (delta "-=" 2)
                else
                    ((this "->" Float_significand) "/=" 10)
                    ((this "->" Float_base) "++")
                    (a "*=" 10)
                    (delta "+=" 2)
                )
            )
            
            (if ((L delta) "==" 0)
                ((this "->" Float_significand) "+=" (L a))
                (return 0)
            )
            (if ((L delta) "==" ("-" 1))
                ((this "->" Float_significand) "+=" ((L a) "*" 10))
                (return 0)
            )
            ((this "->" Float_significand) "=" (((L (this "->" Float_significand)) "*" 10) "+" (L a)))
            ((this "->" Float_base) "--")
        )
    )
)

(function max(a b)
    (if ((L a) ">" (L b))
        (return (L a))
    else
        (return (L b))
    )
)
(function min(a b)
    (if ((L a) "<" (L b))
        (return (L a))
    else
        (return (L b))
    )
)
(function abs(a)
    (if ((L a) "<" 0)
        (return ("-" (L a)))
    else
        (return (L a))
    )
)
(function pow(a b)
    (var (buff int))
    (buff "=" (L a))
    
    (while ((L b) ">" 0)
        (buff "*=" (L a))
        (b "--")
    )
    (return (L buff))
)
(function GCD(a b)
    (var (tmp int))
    (if ((L a) "<" (L b))
        (tmp "=" (L a))
        (a "=" (L b))
        (b "=" (L tmp))
    )
    (while ((L b) "<>" 0)
        (a "=" ((L a) "%" (L b)))
        (tmp "=" (L b))
        (b "=" (L a))
        (a "=" (L tmp))
    )
    (return (L a))
)
(function LCM(a b)
    (return (((L a) "*" (L b)) "/" (call GCD (L a) (L b))))
)

(function main()
    (var (test1 Float) (test2 Float))
    
    (init test1 Float)
    (init test2 Float)
    (comment "20 * 200 + 200 = 4200")
    (mcall test1 Float_fromInt 20)
    (mcall test2 Float_set 2 2)
    (mcall test1 Float_mul test2)
    (mcall test1 Float_add test2)
    
    (mcall test1 Float_printExp)
    (call out '\n')
    
    (mcall test2 Float_fromInt 8200)
    (mcall test1 Float_div test2)
    
    (mcall test1 Float_printExp)
)
