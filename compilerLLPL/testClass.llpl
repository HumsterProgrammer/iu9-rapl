
(include "stdlib.llpl")
(include "OOP.llpl")

(class Point ()
    (fields (Point_x int) (Point_y int))
    
    (method printPoint (this) 
        (call out '(')
        (call numberOut (L (this "->" Point_x)))
        (call out ' ')
        (call numberOut (L (this "->" Point_y))) 
        (call out ')')
    )
)

(var AnimalText "=" 'Animal\n' 0)
(var DogText "=" 'Dog\n' 0)
(var goodDogText "=" 'good dog\n' 0)
(var barkText "=" 'BARK!\n' 0)

(class Animal()
    (fields )
    (method print(this)
        (call stringOut AnimalText)
    )
)
(class Dog (Animal)
    (fields (number 1))
    (method print(this)
        (call stringOut DogText)
    )
    (method bark(this)
        ((this "->" number) "+=" 10)
        (call stringOut barkText)
    )
)
(class GoodDog(Dog)
    (fields )
    (method print(this)
        (call stringOut goodDogText)
    )
)

(class A()
    (fields )
    (method test (this)
        (call out 'A')
    )
)
(class B1(A)
    (fields )
    (method test(this)
        (call out 'B')
        (call out '1')
    )
)
(class B2(A)
    (fields )
    (method test(this)
        (call out 'B')
        (call out '2')
    )
)
(class C(B1 B2)
    (fields )
    (method test(this)
        (call out 'C')
    )
)


(comment (var testPoint Point))
(var Buddy GoodDog)
(var testObj C)

(function main()
    (var (testPoint Point))
    
    (init testPoint Point)
    (init Buddy GoodDog)
    
    ((testPoint "+" Point_x) "=" 1)
    ((testPoint "+" Point_y) "=" 2)
    
    (mcall testPoint Point_printPoint)
    (mcall (upcast Buddy from GoodDog to Dog) Dog_bark)
    (mcall (upcast Buddy from GoodDog to Dog) Dog_bark)
    (call numberOut (L ((upcast Buddy from GoodDog to Dog) "+" number)))
    
    (call out '\n')
    
    (init testObj C)
    (mcall testObj C_test)
    (mcall (upcast testObj from C to B1) B1_test)
    (mcall (upcast testObj from C to B2) B2_test)
    (mcall (upcast testObj from C to A) A_test)
    (return 0)
)
